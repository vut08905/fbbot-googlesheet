/**
 * JavaScript API ƒë·ªÉ t√≠ch h·ª£p v·ªõi h·ªá th·ªëng chatbot Facebook
 * S·ª≠ d·ª•ng trong trang game ƒë·ªÉ l∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√† gi·∫£i th∆∞·ªüng
 */

class FacebookChatbotAPI {
    constructor(apiEndpoint) {
        this.apiEndpoint = apiEndpoint || 'https://fbbot-googlesheet-production.up.railway.app/api/game.php';
        this.token = this.getTokenFromURL();
        this.userInfo = null;
    }

    /**
     * L·∫•y token t·ª´ URL parameter
     */
    getTokenFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get('token') || urlParams.get('psid');
    }

    /**
     * L·∫•y th√¥ng tin user t·ª´ token
     */
    async getUserInfo() {
        if (!this.token) {
            throw new Error('Kh√¥ng t√¨m th·∫•y token trong URL');
        }

        try {
            const response = await fetch(this.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'get_user',
                    token: this.token
                })
            });

            const data = await response.json();
            
            if (data.success) {
                this.userInfo = data.data;
                return this.userInfo;
            } else {
                throw new Error(data.error || 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin user');
            }
        } catch (error) {
            console.error('Get user info error:', error);
            throw error;
        }
    }

    /**
     * L∆∞u s·ªë ƒëi·ªán tho·∫°i v√† email c·ªßa user
     */
    async saveContact(phone, email = '') {
        if (!this.token) {
            throw new Error('Kh√¥ng t√¨m th·∫•y token');
        }

        // Validate phone
        const phoneRegex = /^[0-9+\-\s()]+$/;
        if (!phoneRegex.test(phone)) {
            throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá');
        }

        try {
            const response = await fetch(this.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'save_contact',
                    token: this.token,
                    phone: phone,
                    email: email
                })
            });

            const data = await response.json();
            
            if (data.success) {
                return data;
            } else {
                throw new Error(data.error || 'Kh√¥ng th·ªÉ l∆∞u th√¥ng tin');
            }
        } catch (error) {
            console.error('Save contact error:', error);
            throw error;
        }
    }

    /**
     * L∆∞u th√¥ng tin tr√∫ng gi·∫£i th∆∞·ªüng
     */
    async savePrize(prizeId, verificationStatus = 'pending') {
        if (!this.token) {
            throw new Error('Kh√¥ng t√¨m th·∫•y token');
        }

        try {
            const response = await fetch(this.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'save_prize',
                    token: this.token,
                    prize_id: prizeId,
                    verification_status: verificationStatus
                })
            });

            const data = await response.json();
            
            if (data.success) {
                return data;
            } else {
                throw new Error(data.error || 'Kh√¥ng th·ªÉ l∆∞u gi·∫£i th∆∞·ªüng');
            }
        } catch (error) {
            console.error('Save prize error:', error);
            throw error;
        }
    }

    /**
     * Hi·ªÉn th·ªã form nh·∫≠p s·ªë ƒëi·ªán tho·∫°i
     */
    showPhoneForm(onSuccess, onError) {
        const modalHTML = `
            <div id="phoneModal" style="
                position: fixed; 
                top: 0; 
                left: 0; 
                width: 100%; 
                height: 100%; 
                background: rgba(0,0,0,0.8); 
                display: flex; 
                align-items: center; 
                justify-content: center; 
                z-index: 9999;
                font-family: Arial, sans-serif;
            ">
                <div style="
                    background: white; 
                    padding: 30px; 
                    border-radius: 10px; 
                    max-width: 400px; 
                    width: 90%;
                    text-align: center;
                ">
                    <h3 style="margin-bottom: 20px; color: #4267B2;">üéâ Ch√∫c m·ª´ng!</h3>
                    <p style="margin-bottom: 20px;">ƒê·ªÉ nh·∫≠n gi·∫£i th∆∞·ªüng, vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i:</p>
                    
                    <form id="phoneForm">
                        <input type="tel" id="phoneInput" placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" required style="
                            width: 100%; 
                            padding: 12px; 
                            border: 2px solid #ddd; 
                            border-radius: 5px; 
                            margin-bottom: 15px;
                            font-size: 16px;
                        ">
                        
                        <input type="email" id="emailInput" placeholder="Email (t√πy ch·ªçn)" style="
                            width: 100%; 
                            padding: 12px; 
                            border: 2px solid #ddd; 
                            border-radius: 5px; 
                            margin-bottom: 20px;
                            font-size: 16px;
                        ">
                        
                        <div style="display: flex; gap: 10px; justify-content: center;">
                            <button type="submit" style="
                                background: #4267B2; 
                                color: white; 
                                border: none; 
                                padding: 12px 24px; 
                                border-radius: 5px; 
                                cursor: pointer;
                                font-size: 16px;
                            ">üíæ L∆∞u th√¥ng tin</button>
                            
                            <button type="button" id="cancelBtn" style="
                                background: #ccc; 
                                color: black; 
                                border: none; 
                                padding: 12px 24px; 
                                border-radius: 5px; 
                                cursor: pointer;
                                font-size: 16px;
                            ">‚ùå H·ªßy</button>
                        </div>
                    </form>
                    
                    <div id="phoneMessage" style="margin-top: 15px; display: none;"></div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', modalHTML);

        const modal = document.getElementById('phoneModal');
        const form = document.getElementById('phoneForm');
        const phoneInput = document.getElementById('phoneInput');
        const emailInput = document.getElementById('emailInput');
        const cancelBtn = document.getElementById('cancelBtn');
        const messageDiv = document.getElementById('phoneMessage');

        // Focus v√†o input
        phoneInput.focus();

        // X·ª≠ l√Ω submit form
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const phone = phoneInput.value.trim();
            const email = emailInput.value.trim();
            
            if (!phone) {
                this.showMessage(messageDiv, 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!', 'error');
                return;
            }

            try {
                this.showMessage(messageDiv, 'ƒêang l∆∞u th√¥ng tin...', 'info');
                
                const result = await this.saveContact(phone, email);
                
                this.showMessage(messageDiv, '‚úÖ ƒê√£ l∆∞u th√¥ng tin th√†nh c√¥ng!', 'success');
                
                setTimeout(() => {
                    modal.remove();
                    if (onSuccess) onSuccess(result);
                }, 1500);
                
            } catch (error) {
                this.showMessage(messageDiv, '‚ùå ' + error.message, 'error');
                if (onError) onError(error);
            }
        });

        // X·ª≠ l√Ω n√∫t h·ªßy
        cancelBtn.addEventListener('click', () => {
            modal.remove();
        });

        // ƒê√≥ng modal khi click outside
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }

    /**
     * Hi·ªÉn th·ªã th√¥ng b√°o
     */
    showMessage(element, message, type) {
        const colors = {
            success: '#d4edda',
            error: '#f8d7da',
            info: '#d1ecf1'
        };
        
        element.style.display = 'block';
        element.style.background = colors[type] || colors.info;
        element.style.padding = '10px';
        element.style.borderRadius = '5px';
        element.style.marginTop = '10px';
        element.textContent = message;
    }

    /**
     * X·ª≠ l√Ω khi ng∆∞·ªùi d√πng tr√∫ng th∆∞·ªüng
     */
    async handlePrizeWon(prizeId, prizeName, prizeValue) {
        try {
            // Hi·ªÉn th·ªã th√¥ng b√°o tr√∫ng th∆∞·ªüng
            this.showPrizeNotification(prizeName, prizeValue);
            
            // L∆∞u th√¥ng tin tr√∫ng th∆∞·ªüng
            await this.savePrize(prizeId);
            
            // Hi·ªÉn th·ªã form nh·∫≠p s·ªë ƒëi·ªán tho·∫°i
            this.showPhoneForm(
                (result) => {
                    console.log('ƒê√£ l∆∞u th√¥ng tin th√†nh c√¥ng:', result);
                    this.showFinalMessage();
                },
                (error) => {
                    console.error('L·ªói l∆∞u th√¥ng tin:', error);
                }
            );
            
        } catch (error) {
            console.error('Handle prize won error:', error);
        }
    }

    /**
     * Hi·ªÉn th·ªã th√¥ng b√°o tr√∫ng th∆∞·ªüng
     */
    showPrizeNotification(prizeName, prizeValue) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #4267B2;
            color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 10000;
            max-width: 300px;
            font-family: Arial, sans-serif;
        `;
        
        notification.innerHTML = `
            <h4 style="margin: 0 0 10px 0;">üéâ Ch√∫c m·ª´ng!</h4>
            <p style="margin: 0;">B·∫°n ƒë√£ tr√∫ng: <strong>${prizeName}</strong></p>
            <p style="margin: 5px 0 0 0; font-size: 18px;">üí∞ ${prizeValue}</p>
        `;
        
        document.body.appendChild(notification);
        
        // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    /**
     * Hi·ªÉn th·ªã th√¥ng b√°o cu·ªëi
     */
    showFinalMessage() {
        alert('üéâ C·∫£m ∆°n b·∫°n! Th√¥ng tin c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c l∆∞u. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá s·ªõm ƒë·ªÉ trao gi·∫£i!');
    }
}

// V√≠ d·ª• s·ª≠ d·ª•ng
window.FacebookChatbotAPI = FacebookChatbotAPI;

// Auto-init khi trang load
document.addEventListener('DOMContentLoaded', function() {
    window.fbChatbotAPI = new FacebookChatbotAPI();
    
    // L·∫•y th√¥ng tin user n·∫øu c√≥ token
    if (window.fbChatbotAPI.token) {
        window.fbChatbotAPI.getUserInfo()
            .then(userInfo => {
                console.log('User info:', userInfo);
                // C√≥ th·ªÉ hi·ªÉn th·ªã t√™n user tr√™n giao di·ªán
                if (userInfo.first_name) {
                    const welcomeElement = document.querySelector('.welcome-message');
                    if (welcomeElement) {
                        welcomeElement.textContent = `Xin ch√†o ${userInfo.first_name}!`;
                    }
                }
            })
            .catch(error => {
                console.log('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin user:', error.message);
            });
    }
});

/* 
H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:

1. Include file n√†y v√†o trang game:
   <script src="facebook-chatbot-api.js"></script>

2. S·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng tr√∫ng th∆∞·ªüng:
   
   // ID gi·∫£i th∆∞·ªüng (t∆∞∆°ng ·ª©ng v·ªõi b·∫£ng prizes)
   const prizeId = 1; // Gi·∫£i Nh·∫•t
   const prizeName = "Voucher 500k";
   const prizeValue = "500,000ƒë";
   
   fbChatbotAPI.handlePrizeWon(prizeId, prizeName, prizeValue);

3. Ho·∫∑c ch·ªâ hi·ªÉn th·ªã form nh·∫≠p s·ªë ƒëi·ªán tho·∫°i:
   
   fbChatbotAPI.showPhoneForm(
       (result) => console.log('Success:', result),
       (error) => console.error('Error:', error)
   );

4. L∆∞u th√¥ng tin li√™n h·ªá ƒë∆°n gi·∫£n:
   
   fbChatbotAPI.saveContact('0901234567', 'email@example.com')
       .then(result => console.log('Saved!'))
       .catch(error => console.error('Error:', error));
*/
